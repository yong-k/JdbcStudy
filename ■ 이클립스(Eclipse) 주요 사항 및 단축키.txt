■■■ 이클립스(Eclipse) 관련 주요사항 ■■■
write by KIM HO JIN
최종 수정 2020-07-24


○ 이클립스 다운로드 사이트
   http://www.eclipse.org/downloads


○ 이클립스 한글 패치(권장하지 않음)
   http://www.eclipse.org/babel/downloads.php
   - Babel Language Packs 항목에서 이클립스 버전 클릭
   - BabelLanguagePack-eclipse-ko_xxxxxx.zip
     파일 다운로드
   - 압축을 해제하여 이클립스 디렉토리에 덮어쓰기 한다.


○ 이클립스(Eclipse) 개요

   이클립스는 프로젝트 기반으로 소스를 작성하고 실행하는 방식이다.
   간단한 자바 소스를 작성하고, 터미널에서 컴파일 및 실행하는 정도로
   실무에서 요구하는 응용 프로그램을 제작할 수 없다.

   다른 개발자들이 제공하는 많은 라이브러리를 참조하고 공조하면서
   솔루션 차원에서 작업해야 다양하고 세세한 기능을 구현하는 프로그램을 만들 수 있다.

   이러한 배경에서 이클립스와 같은 통합개발도구가 탄생하게 된 것이다.
   이와같은 시대적 요구에 따라 이클립스는 
   프로젝트 단위로 소스를 관리하고 개발하며 패키징하는 방식을 사용하고 있다.

   이클립스가 처음 실행될 때 워크스페이스(Workspace)를 결정하는 안내 창이 나타난다.
   이때 입력하는 디렉터리 경로는...
   기존에 존재하지 않는 디렉터리일 경우
    "OK" 버튼을 클릭하면 입력한 디렉터리가 자동으로 생성되면서
   새로운 워크스페이스를 할당하게 된다.

   Workspace Launcher 창 아래에 있는
   『Use this as default and do not ask again』을 체크하면
   이 워크스페이스를 기본 워크스페이스로 지정하고
   다음부터는 이 대화상자가 나타나지 않는다.

   이 대화상자는 나중에 워크스페이스를 변경하는 메뉴에서 호출할 수 있기 때문에
   이 체크상자를 체크해도 문제가 발생하지 않는다.
   다만, 많은 워크스페이스로 작업을 해야 할 경우
   현재 내가 실행한 이클립스가 어느 워크스페이스를 작업장으로 하고 있는지
   확인할 필요가 있을 경우가 많이 있다.
   이 경우 이 체크를 해제하여 이클립스를 실행할 때마다 확인함으로써
   워크스페이스를 혼동하는 실수를 하지 않도록
   경고 창의 기능으로 활용하는 것도 경험상 권장할 사항이다.


○ 이클립스가 실행되지 않는 경우

   이클립스의 루트 경로의 『eclipse.ini』파일에 -vm 부분을 추가한다.
   [eclipse.ini 파일]
   -showsplsh
   org.eclipse.platform
   --launcher.XXMaxPermSize
   256M
   -framework
   plugins\org.eclipse.osgi_xxx.jar
   -vm
   [JDK 7 설치경로]\bin\javaw.exe
   -vmargs
   -Dosgi.requiredJavaVersion=1.7
   -Xms40m
   -Xmx512m


○ JSP / HTML 한글 인코딩을 UTF-8로 변경
   - Windows > Preferences... > Web > Jsp Files
   - Windows > Preferences... > Web > HTML Files
  
   우측 화면의 Encoding 에 "ISO 10646/Unicode(UTF-8)"로 변경 후 [ok] 버튼 클릭


○ 자바 스크립트 파일 한글 인코딩을 UTF-8로 변경
   - Windows > Preferences... > General > Contents type ...

   우측 화면의 Text-Javascript 의 Default encoding 에 "utf-8"로 변경 후
   [update] 버튼 클릭


○ 워크스페이스의 문자셋을 UTF-8로 변경
   (자바 파일, JSP, JavaScript 등 모든 문서의 내용을 UTF-8로 변경)
   - Windows > Preferences > General > Workspace 의
     Text file encoding 을 [Other-UTF-8]로 변경


○ 주석의 맞춤법 검사를 해주는 옵션 해제 (성능 저하)
   - Windows > Preferences > General > Editors > TextEditors
     > Spelling > Enable spell checking 옵션 해제


○ 외부에 있는 압축 파일 불러오기 (import)
   1. Package Explorer 에서 프로젝트를 선택하고 [Import...]
   2. Import 뷰에서 'Zip file'을 선택
   3. [Browser...] 를 이용하여 선택할 압축 파일이 있는 디렉토리 찾기
   4. 압축 파일(jar)을 선택하고 [열기] 버튼을 클릭
   ※ 필요한 것만 선택할 수 있고, 모든 파일을 선택할 수 있다.


○ 외부로 압축 파일 내보내기 (export)
   1. Package Explorer 에서 프로젝트를 선택하고 [Export...]
   2. Export 대화상자에서 'JAR file'을 선택하고 [Next]
   3. 압축할 파일을 선택하고 [JAR file:]에 보낼 위치와 이름을 입력
      - 라이브러리식 jar 압축 파일을 만들려면 [finish]
      - 어플리케이션식 jar 압축 파일을 작성할 경우에는 [Next]
        1) JAR Export 대화상자에서 JAR Packing Option 은 기본사항을 사용
        2) 메인 클래스(main 메소드가 있는 클래스)를 선택
           [Main class:]를 [Browser] 를 통하여 선택
        3) 압축 파일을 만들 것인지를 확인한 다음 [Yes]


○ 이클립스에서 JAVA 한글 도움말 설정
   1. 이클립스 실행
   2. 왼쪽 Package Explorer -> JRE System Library -> rt.jar -> 오른쪽 마우스 클릭 -> Properties 선택
   3. Java Source Attachment -> Location path 의 내용을 지운다.
   4. Javadoc Location -> Browse 
       http://java.sun.com/javase/6/docs/api/ 를  http://xrath.com/javase/ko/6/docs/ko/api/index.html 로 변경


○ 자바 프로젝트의 생성

   『New Java Project』 창이 나타나면 『Project name』 항목에 프로젝트명 입력
   프로젝트명은 자바 Naming Rule 에 따라 영문과 숫자를 이용하여 입력
   생성할 프로젝트에 대한 저장소를 『Location』 항목에서 확인하고
   JRE 항목에 이 프로젝트에서 사용할 JRE 또는 JDK 버전을 설정

   『Project layout』 항목은 자바 소스 파일과 컴파일 후 만들어지는 클래스 파일을
   같은 폴더에 둘 것인지 분리할 것인지를 설정하는 프로젝트 생성 옵션이다.
   오래전 자바 초창기에는 터미널에서 수동으로 일일이 컴파일해야 했기 때문에
   소스 파일과 클래스 파일을 같은 폴더에 놓고 사용하는 습관이 생기게 되었다.

   하지만 최근에는 이클립스와 같은 고차원의 개발 도구를 사용하면서
   소스 파일과 배포본 클래스 파일을 완전히 분리하여 배포본의 버전 관리를 하는 것이
   표준으로 되어가고 있다.

   이클립스에는 프로젝트는 하나의 그룹으로 묶는 "Working Sets"라는 프로젝트 그룹 개념이 있다.
   프로젝트를 생성할 때에도 Working Sets 설정 항목이 나타나는데
   나중에 원하는 Working Sets에 프로젝트를 설정할 수 있기 때문에
   굳이 지금 당장 설정하지 않고 넘어가도 무방하다.

   이클립스의 Working Sets에 대해 익숙해지면
   프로젝트를 생성할 때 어느 Working Sets을 설정해야 하는지 자연스럽게 알게 될 것이다.

   "New Java Project" 창이 "Java Settings"과정으로 전환되었다.
   이 화면에서는 자바 프로젝트가 사용할 소스 폴더와 컴파일 결과 폴더
   그리고 기타 프로젝트에 대한 설정 및 참조 라이브러리 등을 추가로 설정할 수 있다.

   이 모든 설정들은 나중에 프로젝트 속성에서 다시 변경 설정할 수 있기 때문에
   초반부터 일일이 살펴볼 필요는 없다.

   단지, JavaProject1이라는 프로젝트는
   src 폴더를 소스 폴더로 정의하고, bin 폴더를 결과 폴더로 정의하고 있다는
   정도로 이해하고 "Finish"버튼을 클릭하면 된다.

   프로젝트 생성을 완료할 때 "Open Associated Perspective?"라는 확인 창이 나타나게 된다.
   이는 자바 프로젝트에 대한 분할영역 화면(Perspective)을 처음 열기 때문이다.
   이 창에서 "Yes"버튼을 클릭하여 지금 생성한 프로젝트에 적합한 분할영역 화면이 나타나게 한다.
 
   Java Perspective 분할영역 화면이 나타나면서 JavaProject1이라는 자바 프로젝트가 나타난다.
   이클립스는 분할영역 화면 왼쪽에 있는 Package Explorer 창 또는 Project Explorer 창을 통해
   작업할 프로젝트와 그 안에 들어있는 소스 파일들을 탐색할 수 있다.




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


■■■ 이클립스에서 톰캣서버 추가 안될 때 ■■■
        (Server Name 이 빈칸으로 나올 때)

1. 이클립스를 종료한다.(Close Eclipse)

2. 다음 경로의 두 개 파일을 삭제한다.
   {workspace-directory}/.metadata/.plugins/org.eclipse.core.runtime/.settings 
   ① org.eclipse.wst.server.core.prefs
   ② org.eclipse.jst.server.tomcat.core.prefs

3. 이클립스를 다시 실행시킨다.(Restart Eclipse)



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


■■■ 이클립스(Eclipse) 주요 단축키 ■■■
write by KIM HO JIN
최종 수정 2020-07-24


○ 자주 사용하는 단축키 ================================================================================================

   0. 주요 단축키 보기
      ▶ Ctrl + Shift + L

   1. 블럭 단위 주석 처리( /*   */ )
      ▶ 블럭 지정한 후에 Ctrl + Shift + /    

   2. 블럭 단위 주석 해제
      ▶ 블럭 지정한 후에 Ctrl + Shift + \

   3. 라인 단위 주석 처리( // ) 또는 제거
      ▶ Ctrl + / 

   4. 자동 완성 기능. 어휘의 자동완성(Content Assistance)
      ▶ Ctrl + Spacebar 

   5. 라인 이동 : 커서가 있는 라인의 모든 글자가 방향키에 따라 이동
      ▶ Alt + 방향키(위,아래)

   6. 라인 삭제 : 커서가 있는 라인을 삭제
      ▶ Ctrl + D

   7. 에러 픽스 : 에러난 곳에 대해 해결 방법을 제시함
      ▶ 에러 발생 지점(빨간밑줄)에서 Ctrl + 1

   8. Undo / Redo
      ▶ Ctrl + Z / Ctrl + Y

   9. System.out.println(); 생성
      ▶ syso 입력 후 Ctrl + Spacebar   

  10. 들여쓰기 자동 수정
      → 커서가 있는 라인의 들여쓰기를 자동으로 맞춰준다. 
         블럭을 지정하고 실행 시 블럭 내에서 자동 들여쓰기
      ▶ Ctrl + I

  11. Getter / Setter 자동 생성
      ▶ Shift + Alt + S R

  12. 디버깅 시작
      ▶ F11

  13. 상속 구조 클래스 보기(메소드 등) 
      클래스명을 선택하고 누르면 해당 클래스의 Hierarchy 를 볼 수 있다.
      ▶ F4

  14. 변수 및 메소드 변경 : 같은 이름 모두 바꾸기(변경할 변수/메소드/클래스에서 단축키를 누르고 변경 후에 엔터를 누르면 이름이 모두 변경)
      ▶ Alt + Shift + R

  15. 에디터 화면 넓게 / 좁게
      ▶ Ctrl + M

  16. 열 복사 모드로 전환 / 해제
      ▶ Alt + Shift + A

  17. 저장 및 컴파일
      ▶ Ctrl + S

  18. 열린 파일 모두 닫기
      ▶ Ctrl + Shift + F4

  19. 열린 파일 모두 닫기
      ▶ Ctrl + Shift + W 

  20. 창 닫기
      ▶ Ctrl + W


○ Alt 주요 조합 ================================================================================================

   ▶ Alt + Shift + J ⇒ 설정해 둔 기본주석 부여(JavaDoc 주석)

   ▶ Alt + Shift + R ⇒ 변수 및 메소드 변경
                      → 변경할 변수 에서 단축키를 누르고 
                         변경 후에 엔터를 누르면 변수명이 모두 변경

   ▶ Alt + Shift + 방향키 ⇒ 블록 선택하기

   ▶ Alt + ←→(좌/우) ⇒ 뷰 화면의 탭에 열린 페이지 이동(이전과 이후)

   ▶ Alt + ↑↓(상/하) ⇒ 커서가 있는 줄을 위 아래로 이동하여 자리 바꾸기
                        → 커서가 있는 줄의 모든 글자가 방향키에 따라 위아래로 이동


○ Ctrl 주요 조합 ================================================================================================

   ▶ CTRL + 휠 ⇒ 페이지 단위 이동

   ▶ CTRL + 객체클릭 ⇒ 클래스나 메소드 혹은 멤버를 정의한 곳으로 이동(Open Declaration)
      ▷ F3

   ▶ Ctrl + 1 ⇒ Quick Fix(자동 완성 기능의 업그레이드형)
                  - 구현하지 않은 메소드 추가
                  - 로컬 변수 이름 바꾸기
                  - Assignment 입력
                  - 행 둘러싸기 (if/where/for이나 블록으로 둘러 싸려면 해당영역을 선택하고 Ctrl + 1)

   ▶ Ctrl + D ⇒ 한 라인 삭제 (커서가 있는 줄을 삭제)

   ▶ Ctrl + E ⇒ 뷰 화면의 탭에 열린 페이지 이동

   ▶ Ctrl + L ⇒ 특정 라인으로 이동 (대화창에 숫자 입력 → 원하는 라인으로 이동)

   ▶ Ctrl + I ⇒ 자동 들여쓰기 수정
               → 커서가 있는 줄의 들여쓰기를 자동으로 맞춰준다. 
                  블록을 지정하고 실행 시 블록내에서 자동 들여쓰기

   ▶ Ctrl + K ⇒ 문자열 찾기 (찾고자 하는 문자열을 블럭으로 설정한 후...)
      ▷ Ctrl + Shift + K ⇒ 역순으로 찾기
      ▷ Ctrl + J ⇒ 입력하며 실시간으로 찾기
      ▷ Ctrl + Shift + J ⇒ 입력하며 실시간으로 역순으로 찾기
      ▷ Ctrl + F ⇒ 기본으로 찾기
      ▷ Ctrl + H ⇒ Find 및 Replace

   ▶ Ctrl + M ⇒ 전체화면 토글 (선택한 화면 전체보기)
               → 에디터 화면 넓게/좁게

   ▶ Ctrl + O ⇒ 현재 편집 화면의 아웃라인 (메소드 리스트 확인, 메소드나 필드 이동 가능)

   ▶ Ctrl + Q ⇒ 마지막 편집위치로 가기

   ▶ Ctrl + T ⇒ 계층 구조 보기(★★★)
               → 하이어라키 팝업 창 띄우기(인터페이스 구현 클래스간 이동시 편리)

   ▶ Ctrl + W ⇒ 창 닫기 (선택 소스 닫기)
      ▷ Ctrl + Shift + W ⇒ 열린 파일 모두 닫기
      ▷ Ctrl + Shift + F4 ⇒ 열린 파일 모두 닫기

   ▶ Ctrl + , or . ⇒ 이전 또는 다음 Annotation(Error, Warning, Bookmark)으로 이동

   ▶ Ctrl + / ⇒ 주석 처리 (여러줄 블럭 처리 가능)
      ▷ Ctrl + Shift + / ⇒ JavaDoc 주석 추가
      ▷ Ctrl + Shift + \ ⇒ JavaDoc 주석 해제

   ▶ Ctrl + Alt + ↑↓(상/하) ⇒ 한줄(블럭) 복사

   ▶ Ctrl + Shift + E ⇒ Switch to Editor (탭에 열려있는 Editor 이동)

   ▶ Ctrl + Shift + F ⇒ 자동 줄맞춤. 알아서 정렬. (소스 정리)

   ▶ Ctrl + Shift + G ⇒ 클래스의 메소드나 필드를 Reference하고 있는 곳으로 이동
      ▷ 반대 : F3 (Reference하는 클래스로 이동)

   ▶ Ctrl + Shift + L ⇒ 단축키 보기 (Window > Preference > General > Keys 메뉴에서 확인 가능)
      ▷ Ctrl + Shift + L + L ⇒ 단축키 지정

   ▶ Ctrl + Shift + M : 캐럿이 위치한 대상에 필요한 특정클래스 import

   ▶ Ctrl + Shift + O ⇒ 자동 import 갱신 처리 (사용하지 않는 Class는 삭제)

   ▶ Ctrl + Shift + R ⇒ Open Resource (파일 이름으로 소스찾기)

   ▶ Ctrl + Shift + U ⇒ 소스 내에서 선택한 변수, 클래스, 메소드 등을 사용하는 라인 찾기

   ▶ Ctrl + Shift + ↑↓(상/하) ⇒ 다음/이전 메소드 단위로 이동

   ▶ Ctrl + Shift + Spacebar ⇒ 메소드 파라미터 힌트 (메소드에 입력해야 하는 파라미터 정보가 표시된다.)

   ▶ Ctrl + F3 ⇒ 클래스 아웃라인

   ▶ Ctrl + F6 ⇒ View 화면의 탭에 열린 페이지 이동 (재정의 하는게 편리)
                → ULTRAEDIT나 EDITPLUS 의 Ctrl +TAB 과 같은 기능

   ▶ Ctrl + F7 ⇒ View 간 화면 전환

   ▶ Ctrl + F8 ⇒ Perspective 간 화면 전환

   ▶ Ctrl + F11 ⇒ 바로 전에 실행했던 클래스 실행

   ▶ Ctrl + PageDown ⇒ 뷰 화면의 탭에 열린 페이지 이동

   ▶ Ctrl + 2 + R : Rename(리팩토링)


○ Function Key 주요 기능 ================================================================================================

   ▶ F2 ⇒ 에러의 원인에 대한 힌트 제공(에러 라인 빨간줄에 커서를 위치시킨 후 ...)

   ▶ F3 ⇒ Java 편집기에서 Reference하는 클래스의 자바파일로 이동 / 메소드 정의부로 이동
      ▷ Ctrl + 클릭
      ▷ 반대 : Ctrl + Shift + G (클래스의 메소드나 필드를 Reference하고 있는 곳으로 이동)

   ▶ F4 ⇒ 해당 클래스의 Hierarchy (클래스명을 선택하고 누르면 해당 클래스의 Hierarchy(계층)를 볼 수 있다.)

   ▶ F11 ⇒ 디버깅 시작

   ▶ F12 ⇒ Editor로 포커스



○ 디버깅 관련 주요 기능 ================================================================================================

   ▶ F11 ⇒ 디버깅 시작 (디버그 모드로 실행)

   ▶ F5 ⇒ Step Into
           (현재의 명령문이 호출되는 메소드 속으로 진행하여, 그 첫 문장을 실행하기 전에 멈춘다. 
            하지만, 자바 라이브러리 클래스 수준까지 들어가므로 단계필터 사용을 체크(Shift + F5)를 하면 
            필터를 설정한 클래스에 대하서는 Step Over 기능과 같은 기능을 수행한다.)

   ▶ F6 ⇒ Step Over
            (현재의 명령문을 실행하고 다음 명령문 직전에 다시 멈춘다.)

   ▶ F8 ⇒ Resume
            (멈추어 있던 스레드를 다시 계속 실행한다.) 

   ▶ Ctrl + Shift + B ⇒ 현재커서위치에 Break point 설정 또는 해제

   ※ Display view(표시)
      : Window > Show View > Other > Debug > Display 를 선택하여 
        소스상에서 필요한 부분을 선택해서 실행시켜 볼 수 있다.  




○ 문장 자동 기능(템플릿) 사용 시 키워드 ================================================================================================

   ▶ sysout ⇒ System.out.println()

   ▶ try ⇒ try~catch문 완성.

   ▶ for ⇒ for문 완성 배열에 관련된 변수가 조건문 알아서 들어감.

   ▶ do ⇒ do~while문 완성.

   ▶ while ⇒ while문 완성.

   ※ 문장 자동 완성 템플릿을 수정하거나 추가하려면
      Window > Preference > Java > Editor > Templates 에서 할 수 있다.



○ 에디터 변환 ================================================================================================

   ▶ 에디터가 여러 파일을 열어서 작업중일때 
      Ctrl + F6 키를 누르면 여러파일명이 나오고 
      F6키를 계속 누르면 아래로 → 키보드 누르면 화면이 고정되어 선택할수있음
      ▷ Ctrl + Shift + F6 키를 누르면 위로 커서가 움직인다.

   ▶ Alt +방향키 ⇒ 소스코드 네비게이션(순서대로 나타나고 닫은창도 버퍼안 있으면 살아남)

   ▶ Ctrl + 마우스커서(혹은 F3) ⇒ 클래스나 메소드 혹은 멤버를 상세하게 검색하고자 할때 ( f3은 부모로 바로날라감 )

   ▶ Ctrl + F7 ⇒ 뷰(View)간 네비게이션 화면 전환

   ▶ Ctrl + F8 ⇒ 모드(Perspective)창 간의 네비게이션 화면 전환

   ▶ Ctrl + E ⇒ 뷰(View) 화면의 탭에 열린 페이지 이동
      ▷ Ctrl + F6 ⇒ 뷰(View) 화면의 탭에 열린 페이지 이동

   ▶ F12 : 에디터로 포커스 위치



○ 실행 ================================================================================================

   ▶ Ctrl + F11 ⇒ 바로 전에 실행했던 클래스 실행.

   ▶ Shift + Alt + X ⇒ 실행에 관련 된 단축키 나옴 ( 단축키보기 )
                      → (A ⇒ 애플릿실행, R ⇒ 서버실행, J ⇒ 어플리케이션실행).



○ 문자열 찾기 ================================================================================================

   ▶ Ctrl + K ⇒ 찾고자 하는 문자열을 블럭으로 설정한 후 키를 누른다.
      ▷ Ctrl + Shift + K ⇒ 역으로 찾고자 하는 문자열을 찾아감.

   ▶ Ctrl + J ⇒ 입력하면서 찾을 수 있음.
      ▷ Ctrl + Shift + J ⇒ 입력하면서 거꾸로 찾아갈 수 있음.

   ▶ Ctrl + F ⇒ 기본적으로 찾기

   ▶ Ctrl + H : Find 및 Replace



○ 기타 단축키 ================================================================================================

   ▶ Ctrl + 3 ⇒ 기술검색해서 사용하기.

   ▶ Ctrl + Alt + J ⇒ 소스 한줄로 바꾸기 ( // 주석삭제필수 , 자동줄맞춤과 함께 사용하여 한 줄로 찾아바꾸기 활용 )

   ▶ Ctrl + Alt + L ⇒ 소문자 형태로 바꾸기

   ▶ Ctrl + Alt + K ⇒ test_aaa 형태를 testAaa 형태로 바꾸기 ( 마켓에서 anyedit 플러그인 설치 )

   ▶ 블록지정 + Shift + Alt + Z ⇒　관련된 여러 가지 기능 문들 나옴.(괜찮은 기능)

   ▶ Ctrl + O ⇒ 해당 소스의 메소드 리스트를 확인

   ▶ Alt + Shift + up,down ⇒ {} 단위로 선택됨 up하면할수록 더넓은범위 ex) if -> 메소드, 클래스

   ▶ Alt + Shift + S → R ⇒ Getter/setter 자동생성

   ▶ Ctrl + Shift + T ⇒ 자바소스찾기 ( jar파일안에있는소스들 볼수있음 )

   ▶ Ctrl + Alt + H ⇒ 메소드나 클래스 이름을 블록하고 누르면 메서드를 사용하는 모든 소스를 보여준다(라인까지상세하게)

   ▶ Alt + Shift + L ⇒ 선택한코드를 지역변수화시켜 자동등록 ( Kjjj.getTest = 111; → Kjjj1 = kjjj kjjj1.getTest= 1111; 이런식 )

   ▶ Alt + Shift + M ⇒ 블록된 소스를 매서드화시켜서 빼내고 그걸 자동으로 호출하는소스까지만들어준다~

   ▶ Ctrl + Alt + 방향키 ⇒ 아래나 위로 하면 그 라인이 복사&붙여넣기 된다.



○ 이클립스 기본 설정 ================================================================================================

   ▶ Windows - Preferences - Java - Editor - Syntax Coloring - java
      - Keyword ´return´ , Keywords excluding ´return´ = (blue)
      - Classes - (red)

   ▶ Windows - Preferences - General - Appearance - Colors and Fonts - Basic -
      Text Font → Tahoma, Verdana, 굵게, 크기12로 조정
